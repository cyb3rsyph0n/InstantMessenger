#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Common.DBAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="IM")]
	public partial class ConversationDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertConversationItem(ConversationItem instance);
    partial void UpdateConversationItem(ConversationItem instance);
    partial void DeleteConversationItem(ConversationItem instance);
    partial void InsertConversationMember(ConversationMember instance);
    partial void UpdateConversationMember(ConversationMember instance);
    partial void DeleteConversationMember(ConversationMember instance);
    partial void InsertMessageItem(MessageItem instance);
    partial void UpdateMessageItem(MessageItem instance);
    partial void DeleteMessageItem(MessageItem instance);
    partial void InsertMissedConversationItem(MissedConversationItem instance);
    partial void UpdateMissedConversationItem(MissedConversationItem instance);
    partial void DeleteMissedConversationItem(MissedConversationItem instance);
    #endregion
		
		public ConversationDataContext() : 
				base(global::Common.Properties.Settings.Default.IMConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ConversationDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ConversationDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ConversationDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ConversationDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ConversationItem> ConversationItems
		{
			get
			{
				return this.GetTable<ConversationItem>();
			}
		}
		
		public System.Data.Linq.Table<ConversationMember> ConversationMembers
		{
			get
			{
				return this.GetTable<ConversationMember>();
			}
		}
		
		public System.Data.Linq.Table<MessageItem> MessageItems
		{
			get
			{
				return this.GetTable<MessageItem>();
			}
		}
		
		public System.Data.Linq.Table<MissedConversationItem> MissedConversationItems
		{
			get
			{
				return this.GetTable<MissedConversationItem>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblConversationList")]
	public partial class ConversationItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ConversationID;
		
		private string _ConversationGUID;
		
		private System.DateTime _DateCreated;
		
		private EntitySet<ConversationMember> _ConversationMembers;
		
		private EntitySet<MessageItem> _MessageItems;
		
		private EntitySet<MissedConversationItem> _MissedConversationItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConversationIDChanging(long value);
    partial void OnConversationIDChanged();
    partial void OnConversationGUIDChanging(string value);
    partial void OnConversationGUIDChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public ConversationItem()
		{
			this._ConversationMembers = new EntitySet<ConversationMember>(new Action<ConversationMember>(this.attach_ConversationMembers), new Action<ConversationMember>(this.detach_ConversationMembers));
			this._MessageItems = new EntitySet<MessageItem>(new Action<MessageItem>(this.attach_MessageItems), new Action<MessageItem>(this.detach_MessageItems));
			this._MissedConversationItems = new EntitySet<MissedConversationItem>(new Action<MissedConversationItem>(this.attach_MissedConversationItems), new Action<MissedConversationItem>(this.detach_MissedConversationItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConversationID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ConversationID
		{
			get
			{
				return this._ConversationID;
			}
			set
			{
				if ((this._ConversationID != value))
				{
					this.OnConversationIDChanging(value);
					this.SendPropertyChanging();
					this._ConversationID = value;
					this.SendPropertyChanged("ConversationID");
					this.OnConversationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConversationGUID", DbType="VarChar(36) NOT NULL", CanBeNull=false)]
		public string ConversationGUID
		{
			get
			{
				return this._ConversationGUID;
			}
			set
			{
				if ((this._ConversationGUID != value))
				{
					this.OnConversationGUIDChanging(value);
					this.SendPropertyChanging();
					this._ConversationGUID = value;
					this.SendPropertyChanged("ConversationGUID");
					this.OnConversationGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConversationItem_ConversationMember", Storage="_ConversationMembers", ThisKey="ConversationID", OtherKey="ConversationID")]
		public EntitySet<ConversationMember> ConversationMembers
		{
			get
			{
				return this._ConversationMembers;
			}
			set
			{
				this._ConversationMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConversationItem_MessageItem", Storage="_MessageItems", ThisKey="ConversationID", OtherKey="ConversationID")]
		public EntitySet<MessageItem> MessageItems
		{
			get
			{
				return this._MessageItems;
			}
			set
			{
				this._MessageItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConversationItem_MissedConversationItem", Storage="_MissedConversationItems", ThisKey="ConversationID", OtherKey="ConversatioID")]
		public EntitySet<MissedConversationItem> MissedConversationItems
		{
			get
			{
				return this._MissedConversationItems;
			}
			set
			{
				this._MissedConversationItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConversationMembers(ConversationMember entity)
		{
			this.SendPropertyChanging();
			entity.ConversationItem = this;
		}
		
		private void detach_ConversationMembers(ConversationMember entity)
		{
			this.SendPropertyChanging();
			entity.ConversationItem = null;
		}
		
		private void attach_MessageItems(MessageItem entity)
		{
			this.SendPropertyChanging();
			entity.ConversationItem = this;
		}
		
		private void detach_MessageItems(MessageItem entity)
		{
			this.SendPropertyChanging();
			entity.ConversationItem = null;
		}
		
		private void attach_MissedConversationItems(MissedConversationItem entity)
		{
			this.SendPropertyChanging();
			entity.ConversationItem = this;
		}
		
		private void detach_MissedConversationItems(MissedConversationItem entity)
		{
			this.SendPropertyChanging();
			entity.ConversationItem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblConversationMembers")]
	public partial class ConversationMember : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ConversationMemberID;
		
		private long _ConversationID;
		
		private string _UniqueID;
		
		private EntityRef<ConversationItem> _ConversationList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConversationMemberIDChanging(long value);
    partial void OnConversationMemberIDChanged();
    partial void OnConversationIDChanging(long value);
    partial void OnConversationIDChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    #endregion
		
		public ConversationMember()
		{
			this._ConversationList = default(EntityRef<ConversationItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConversationMemberID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ConversationMemberID
		{
			get
			{
				return this._ConversationMemberID;
			}
			set
			{
				if ((this._ConversationMemberID != value))
				{
					this.OnConversationMemberIDChanging(value);
					this.SendPropertyChanging();
					this._ConversationMemberID = value;
					this.SendPropertyChanged("ConversationMemberID");
					this.OnConversationMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConversationID", DbType="BigInt NOT NULL")]
		public long ConversationID
		{
			get
			{
				return this._ConversationID;
			}
			set
			{
				if ((this._ConversationID != value))
				{
					if (this._ConversationList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConversationIDChanging(value);
					this.SendPropertyChanging();
					this._ConversationID = value;
					this.SendPropertyChanged("ConversationID");
					this.OnConversationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniqueID", DbType="VarChar(36) NOT NULL", CanBeNull=false)]
		public string UserID
		{
			get
			{
				return this._UniqueID;
			}
			set
			{
				if ((this._UniqueID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UniqueID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConversationItem_ConversationMember", Storage="_ConversationList", ThisKey="ConversationID", OtherKey="ConversationID", IsForeignKey=true)]
		public ConversationItem ConversationItem
		{
			get
			{
				return this._ConversationList.Entity;
			}
			set
			{
				ConversationItem previousValue = this._ConversationList.Entity;
				if (((previousValue != value) 
							|| (this._ConversationList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ConversationList.Entity = null;
						previousValue.ConversationMembers.Remove(this);
					}
					this._ConversationList.Entity = value;
					if ((value != null))
					{
						value.ConversationMembers.Add(this);
						this._ConversationID = value.ConversationID;
					}
					else
					{
						this._ConversationID = default(long);
					}
					this.SendPropertyChanged("ConversationItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblMessages")]
	public partial class MessageItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MessageID;
		
		private long _ConversationID;
		
		private System.Data.Linq.Binary _MessageData;
		
		private EntityRef<ConversationItem> _ConversationItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageIDChanging(long value);
    partial void OnMessageIDChanged();
    partial void OnConversationIDChanging(long value);
    partial void OnConversationIDChanged();
    partial void OnMessageDataChanging(System.Data.Linq.Binary value);
    partial void OnMessageDataChanged();
    #endregion
		
		public MessageItem()
		{
			this._ConversationItem = default(EntityRef<ConversationItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long MessageID
		{
			get
			{
				return this._MessageID;
			}
			set
			{
				if ((this._MessageID != value))
				{
					this.OnMessageIDChanging(value);
					this.SendPropertyChanging();
					this._MessageID = value;
					this.SendPropertyChanged("MessageID");
					this.OnMessageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConversationID", DbType="BigInt NOT NULL")]
		public long ConversationID
		{
			get
			{
				return this._ConversationID;
			}
			set
			{
				if ((this._ConversationID != value))
				{
					if (this._ConversationItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConversationIDChanging(value);
					this.SendPropertyChanging();
					this._ConversationID = value;
					this.SendPropertyChanged("ConversationID");
					this.OnConversationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageData", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary MessageData
		{
			get
			{
				return this._MessageData;
			}
			set
			{
				if ((this._MessageData != value))
				{
					this.OnMessageDataChanging(value);
					this.SendPropertyChanging();
					this._MessageData = value;
					this.SendPropertyChanged("MessageData");
					this.OnMessageDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConversationItem_MessageItem", Storage="_ConversationItem", ThisKey="ConversationID", OtherKey="ConversationID", IsForeignKey=true)]
		public ConversationItem ConversationItem
		{
			get
			{
				return this._ConversationItem.Entity;
			}
			set
			{
				ConversationItem previousValue = this._ConversationItem.Entity;
				if (((previousValue != value) 
							|| (this._ConversationItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ConversationItem.Entity = null;
						previousValue.MessageItems.Remove(this);
					}
					this._ConversationItem.Entity = value;
					if ((value != null))
					{
						value.MessageItems.Add(this);
						this._ConversationID = value.ConversationID;
					}
					else
					{
						this._ConversationID = default(long);
					}
					this.SendPropertyChanged("ConversationItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblMissedConversations")]
	public partial class MissedConversationItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MissedMessageID;
		
		private string _UserID;
		
		private long _ConversatioID;
		
		private EntityRef<ConversationItem> _ConversationItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMissedMessageIDChanging(long value);
    partial void OnMissedMessageIDChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnConversatioIDChanging(long value);
    partial void OnConversatioIDChanged();
    #endregion
		
		public MissedConversationItem()
		{
			this._ConversationItem = default(EntityRef<ConversationItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MissedMessageID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long MissedMessageID
		{
			get
			{
				return this._MissedMessageID;
			}
			set
			{
				if ((this._MissedMessageID != value))
				{
					this.OnMissedMessageIDChanging(value);
					this.SendPropertyChanging();
					this._MissedMessageID = value;
					this.SendPropertyChanged("MissedMessageID");
					this.OnMissedMessageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="VarChar(36) NOT NULL", CanBeNull=false)]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConversatioID", DbType="BigInt NOT NULL")]
		public long ConversatioID
		{
			get
			{
				return this._ConversatioID;
			}
			set
			{
				if ((this._ConversatioID != value))
				{
					if (this._ConversationItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConversatioIDChanging(value);
					this.SendPropertyChanging();
					this._ConversatioID = value;
					this.SendPropertyChanged("ConversatioID");
					this.OnConversatioIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConversationItem_MissedConversationItem", Storage="_ConversationItem", ThisKey="ConversatioID", OtherKey="ConversationID", IsForeignKey=true)]
		public ConversationItem ConversationItem
		{
			get
			{
				return this._ConversationItem.Entity;
			}
			set
			{
				ConversationItem previousValue = this._ConversationItem.Entity;
				if (((previousValue != value) 
							|| (this._ConversationItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ConversationItem.Entity = null;
						previousValue.MissedConversationItems.Remove(this);
					}
					this._ConversationItem.Entity = value;
					if ((value != null))
					{
						value.MissedConversationItems.Add(this);
						this._ConversatioID = value.ConversationID;
					}
					else
					{
						this._ConversatioID = default(long);
					}
					this.SendPropertyChanged("ConversationItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
